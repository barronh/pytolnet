
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_curtain.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_curtain.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_curtain.py:


TOLNet Ozone Curtain Plot
=========================

This example shows how to acquire TOLNet data from UAH and make a curtain plot.

.. GENERATED FROM PYTHON SOURCE LINES 8-10

Initialize API and Find Data
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 10-23

.. code-block:: default


    # python -m pip install git+https://github.com/barronh/pytolnet.git
    import pytolnet

    api = pytolnet.TOLNetAPI()

    # Find newest data from UAH
    cldf = api.data_calendar('UAH')
    # Choose newest?
    data_id = cldf.index.values[0]
    # Choose specific version
    # data_id = 2115








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Retrieve and Characterize Data
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 26-35

.. code-block:: default


    ds = api.to_dataset(data_id)

    df = ds.to_dataframe().reset_index()
    print(df.describe())

    # Make a curtain plot
    qm = ds['derived_ozone'].T.plot(figsize=(12, 4), vmin=30, vmax=100)
    qm.figure.savefig(f'derived_ozone_{data_id}.png')



.. image-sg:: /auto_examples/images/sphx_glr_plot_curtain_001.png
   :alt: plot curtain
   :srcset: /auto_examples/images/sphx_glr_plot_curtain_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                    time      altitude  derived_ozone
    count                         174096  174096.00000   63538.000000
    mean   2023-08-16 19:17:36.874643968       7.72500      48.525455
    min              2023-08-16 13:06:59       0.30000       0.015444
    25%              2023-08-16 16:10:39       4.01250      40.799999
    50%              2023-08-16 19:18:37       7.72500      47.500000
    75%              2023-08-16 22:24:22      11.43750      55.299999
    max              2023-08-17 01:31:57      15.15000     100.000000
    std                              NaN       4.29549      13.209246





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.652 seconds)


.. _sphx_glr_download_auto_examples_plot_curtain.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_curtain.py <plot_curtain.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_curtain.ipynb <plot_curtain.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
